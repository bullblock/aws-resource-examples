AWSTemplateFormatVersion: '2010-09-09'
Description: Generate an 8-character random string using Lambda and Custom Resource

Resources:
  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaCustomResourceExecution
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
              - Effect: Allow  # Added permission for Custom Resource response
                Action:
                  - s3:PutObject
                Resource: '*'

  # Lambda Function to Generate Random String
  RandomStringLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.12
      Timeout: 15  # Increased timeout to 15 seconds
      Code:
        ZipFile: |
          import json
          import random
          import string
          import urllib3
          import logging

          # Set up logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def send_response(event, context, response_status, response_data, physical_resource_id):
              response_url = event['ResponseURL']
              response_body = {
                  'Status': response_status,
                  'Reason': f'See details in CloudWatch Logs: {context.log_group_name}/{context.log_stream_name}',
                  'PhysicalResourceId': physical_resource_id,
                  'StackId': event['StackId'],
                  'RequestId': event['RequestId'],
                  'LogicalResourceId': event['LogicalResourceId'],
                  'Data': response_data
              }
              json_response = json.dumps(response_body)
              headers = {'Content-Type': ''}
              http = urllib3.PoolManager()
              try:
                  http.request('PUT', response_url, body=json_response, headers=headers)
                  logger.info("Response sent successfully")
              except Exception as e:
                  logger.error(f"Failed to send response: {str(e)}")
                  raise

          def handler(event, context):
              try:
                  # Generate an 8-character random string
                  characters = string.ascii_letters + string.digits
                  random_string = ''.join(random.choice(characters) for _ in range(8))
                  logger.info(f"Generated random string: {random_string}")

                  # Send success response to CloudFormation
                  send_response(event, context, 'SUCCESS', {'RandomString': random_string}, random_string)
                  return {'RandomString': random_string}

              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  send_response(event, context, 'FAILED', {'Error': str(e)}, 'FailedResource')
                  raise

  # Custom Resource to Invoke Lambda and Get the Random String
  RandomStringResource:
    Type: Custom::RandomString
    Properties:
      ServiceToken: !GetAtt RandomStringLambda.Arn

Outputs:
  GeneratedRandomString:
    Description: The 8-character random string generated by Lambda
    Value: !GetAtt RandomStringResource.RandomString
