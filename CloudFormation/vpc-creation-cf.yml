AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to create a VPC with public and private subnets, an Internet Gateway, and a NAT Gateway.

Parameters:
  Prefix:
    Type: String
    Default: prefix
    Description: Prefix for resource names
  VPCName:
    Type: String
    Default: vpc
    Description: Name of the VPC
  VPCCIDR:
    Type: String
    Default: 10.65.0.0/16
    Description: CIDR block for the VPC
  PublicSubnetName:
    Type: String
    Default: public
    Description: Name of the public subnet
  PublicSubnetCIDR:
    Type: String
    Default: 10.65.1.0/24
    Description: CIDR block for the public subnet
  PrivateSubnetName:
    Type: String
    Default: private
    Description: Name of the private subnet
  PrivateSubnetCIDR:
    Type: String
    Default: 10.65.2.0/24
    Description: CIDR block for the private subnet

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-${VPCName}-${RandomString}'

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-${PublicSubnetName}-${RandomString}'

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-${PrivateSubnetName}-${RandomString}'

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-igw-${RandomString}'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  EIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-nat-${RandomString}'

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-public-rt-${RandomString}'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${Prefix}-private-rt-${RandomString}'

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet
  PrivateSubnetId:
    Description: Private Subnet ID
    Value: !Ref PrivateSubnet
  InternetGatewayId:
    Description: Internet Gateway ID
    Value: !Ref InternetGateway
  NatGatewayId:
    Description: NAT Gateway ID
    Value: !Ref NatGateway

# Use Fn::Select and Fn::Split to extract a portion of the StackId
Mappings:
  RandomString:
    Value: !Select [0, !Split ["-", !Select [2, !Split ["/", !Ref "AWS::StackId"]]]]